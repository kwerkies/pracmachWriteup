text(x=mean(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
text(x=max(density(theory)$x),y=1.1*(max(density(theory)$y)),labels="(1)")
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=max(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
text(x=median(density(theory)$x),y=1.1*(max(density(theory)$y)),labels="(1)")
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=median(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
lambda = 0.2
theory <- rexp(1000,rate=lambda)
sample = NULL
for(i in 1:1000){ sample =c(sample,mean(rexp(40,rate=lambda)))}
par(mar=c(1,1,1,1),mfrow=c(2,1))
t_plot <- hist(theory,breaks=100,main="Simulations of exponential distributions",xlab="")
s_plot <- hist(sample,breaks=100,main="Sample: Averages of 40 exponential distributions",xlab="")
library(datasets)
data(ToothGrowth)
ToothGrowth
View(ToothGrowth)
plot(ToothGrowth[,1])
help(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~ToothGrowth)
str(ToothGrowth)
library(ggplot2)
qplot("Tooth Length","Delivery method",data=ToothGrowth,facets=.~ToothGrowth)
library(ggplot2)
qplot("Tooth Length","Delivery method",data=ToothGrowth,facets=.~supp)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~dose)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~as.factor(dose))
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~(as.factor(dose)))
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~(as.factor(dose)))
as.factor(dose)
as.factor(ToothGrowth$dose)
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=ToothGrowth$len,facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=as.data(ToothGrowth$len),facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=as.data.frame(ToothGrowth$len),facets=.~(as.factor(ToothGrowth$dose)))
ToothGrowth$len
class(ToothGrowth)
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~supp)))
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~supp)
qplot(len,supp,data=ToothGrowth,facets=.~dose)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method")
help(qplot)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method"asp=1)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method",asp=1)
mean(ToothGrowth$len[ToothGrowth$supp==OJ])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ"])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose=2])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose==2])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose==2.0])
a <-ToothGrowth[ToothGrowth$supp="OJ"&&ToothGrowth$dose==2]
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&ToothGrowth$dose==2]
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&ToothGrowth$dose=="2.0"]
str(ToothGrowth)
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2.0"]
as.factor(ToothGrowth$dose)
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2"]
View(a)
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth$len[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2"]
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth[ToothGrowth[,2]=="OJ"]
a <-ToothGrowth[[,2]=="OJ"]
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth[which(ToothGrowth$supp=="OJ" & ToothGrowth$dose)==2,]
View(a)
a <-ToothGrowth[,which(ToothGrowth$dose)==2]
a <-ToothGrowth[,which(ToothGrowth$dose==2)]
a <-ToothGrowth[which(ToothGrowth$dose==2),]
a <-ToothGrowth[which(ToothGrowth$dose==2 & ToothGrowth$supp=="OJ"),]
View(a)
Len_OJ2 <- ToothGrowth[which(ToothGrowth$supp=="OJ" & ToothGrowth$dose==2),]
mean(Len_OJ2[,1])
Len_VC2 <- ToothGrowth[which(ToothGrowth$supp=="VC"&ToothGrowth$dose==2),]
TL = mean(Len_VC2[,1])
t.test(TL-mean(Len_OJ2[,1]))
t.test(Len_VC2[,1]-Len_OJ2[,1])
Len_OJall <- ToothGrowth[which(ToothGrowth$supp=="OJ"),]
Len_VCall <- ToothGrowth[which(ToothGrowth$supp=="VC"),]
t.test(Len_VCall[,1]-Len_OJall[,1])
t.test(Len_OJall[,1]-Len_VCall[,1])
fit <- lm(len~dose,data=ToothGrowth)
fit
plot(fit)
plot(fit)
plot(fit)
fit$r.squared
summary(fit)$r.squared
library(datasets)
data(mtcars)
fit <- lm(mpg~cyl+wt)
mtcars
fit <- lm(mpg~cyl+wt)
c <- mtcars[which(mtcars$cyl==4 | mtcars$cyl==8),]
fit <- lm(mpg ~ cyl+wt,data=c)
fit
fit2 <- lm(mpg ~ cyl,data=c)
fit2
View(c)
fit3 <- lm(mpg ~cyl+wt,data=mtcars)
fit3
fit4 <- lm(mpg ~ cyl,data=mtcars)
fit3
fit4
fit$coef
fit$coef[2]
fit$coef[2]*4
library(datasets)
data(mtcars)
c <- mtcars[which(mtcars$cyl==4 | mtcars$cyl==8),]
fit1 <- lm(mpg ~ cyl+wt,data=c)
fit2 <- lm(mpg ~ cyl,data=c)
fit1
fit2
help(dfbetas)
x<-c(0.586,0.166,-0.042,-0.614,11.72)
y<-c(0.549,-0.026,-0.127,-0.751,1.344)
fit5 <- lm(y~x)
plot(fit5)
dfbeta(fit5(max(hatvalues)))
fit5 <- lm(y~x)
dfbeta(fit5(max(hatvalues)))
dfbeta(fit5)
dfbeta(fit5)[1:5,2]
dfbeta(fit5)[1:5,max(hatvalues(fit5))]
cat(\014)
cat("\014")
library(datasets)
data(mtcars)
fit <- lm(mpg ~ .,data=mtcars)
fit
View(mtcars)
help(mtcars)
fit$coef
fit2 <- lm(mpg ~ am, data=mtcars)
fit2
fit1$coef[=="am"]
fit1$coef[1]
fit1 <- lm(mpg ~ .,data=mtcars)
fit1$coef[1]
fit1$coef[5]
fit1$coef[=="am"]
fit1$coef[which(fit1$coef=="am"),1]
fit1$coef[which(fit1$coef=="am")]
fit1$coef[fit1$coef=="am"]
class(fit1$coef)
fit1$coef
fit1$coef["am"]
help(t.test)
resid(fit2)
plot(resid(fit2))
help(abline)
plot(resid(fit2))
abline(h=0,col="darkblue")
summary(fit2)$r.squared
summary(fit2)
plot(fit2)
par(mfrow=c(2,2))
plot(fit2)
par(mar=c(1,1,1,1),mfrow=c(2,2))
plot(fit2)
par(mar=c(2,2,2,2),mfrow=c(2,2))
plot(fit2)
par(mar=c(3,3,3,3),mfrow=c(2,2))
plot(fit2)
old <- c(140,138,150,148,135)
now <- c(132,135,151,146,130)
mean_old <- mean(old)
mean_now <- mean(now)
qt(.95,15)
t.test(old - now)
qt(.975,8)
qt(.025,8)
2.306004*(sqrt(30)/sqrt(9))+1100
2.306004*(30/sqrt(9))+1100
coke <- c(1,1,1,0)
pepsi <- c(0,0,0,1)
t.test(coke-pepsi)
qt(.95,8)
qt(.95,8)*1078
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
adData=data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis,p=0.5,list=FALSE)
adData=data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis,p=0.5)
data(concrete)
set.seed(975)
inTrain=createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training=mixtures[inTrain,]
View(mixtures)
View(concrete)
plot(Cement,CompressiveStrength,data=mixtures)
help(cement)
help(plot)
plot(mixtures$Cement,mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,colour=.)
plot(training$CompressiveStrength,colour=FlyAsh)
plot(training$CompressiveStrength,colour=training$FlyAsh)
plot(training$CompressiveStrength,color=training$FlyAsh)
library(ggplot2)
plot(training$CompressiveStrength,color=training$FlyAsh)
plot(training$CompressiveStrength,colour=training$FlyAsh)
lm(formula=CompressiveStrength~.,data=training)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
inTrain=createDataPartition(adData$diagnosis,p=3/4)[[1]]
training=adData[inTrain,]
testing=adData[-inTrain,]
View(training)
col.names(training)
colnames(training)
which(colnames(training)==IL)
which(colnames(training)=="IL")
which(colnames(training)=="IL+")
which(colnames(training)=="IL?.")
help(grep)
grep("IL",colnames(training))
grep("^IL",colnames(training))
I=grep("^IL",colnames(training))
preProcess(training[,-1],method="pca")
preProcess(training[,],method="pca")
help(preProcess)
preProcess(training[,I],method="pca")
preProcess(training[,I],method="pca",prcomp=7)
M <- abs(cor(training[,I]))
diag(M)<-0
which(M>0.8,arr.ind=T)
View(M)
which(M>0.4,arr.ind=T)
setwd("C:/Users/weijie/Desktop/Coursera R course/VIII. Practical Machine Learning")
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl1,destfile="rawdata.csv")
rawdata <- read.csv("./rawdata.csv")
download.file(fileUrl2,destfile="testcases.csv")
test_cases <- read.csv("./testcases.csv")
library(caret)
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
trg_allPredictors=training[,-c(1,2,3,4,5,6,7,160)]
a <- NULL
j=1
n=nrow(training)
for(i in 1:ncol(trg_allPredictors)){
trg_allPredictors[,i]=as.numeric(trg_allPredictors[,i])
if(sum(is.na(trg_allPredictors[,i]))>0.8*n){
a[j]=i
j=j+1
}
}
trg_Predictors_short=trg_allPredictors[,-c(a[1:j-1])]
modelFit <- train(as.numeric(training$classe)~.,method="glm",preProcess="pca",data=trg_Predictors_short)
summary(modelFit$finalModel)
testing_all=testing[,-c(1,2,3,4,5,6,7,160)]
for(k in 1:ncol(testing_all)){
testing_all[,k]=as.numeric(testing_all[,k])
}
testing_short=testing_all[,-c(a[1:j-1])]
b <- predict(modelFit,testing_short)
for(m in 1:nrow(testing_short)){
b[m]=round(b[m],digits=0)
}
b=factor(b,levels=c(1,2,3,4,5))
confusionMatrix(b,as.numeric(testing$classe))
View(test_cases)
plot(training$roll_belt,training$classe)
names(training)
library(ggplot2)
par(mfrow(1,3))
plot(rawdata$user_name,rawdata$classe,main="Exploratory graph of classe variable against username variable")
plot(rawdata$cvtd_timestamp,rawdata$classe,main="Exploratory graph of classe variable against timestamp variable")
plot(rawdata$num_window,rawdata$classe,main="Exploratory graph of classe variable against num_window variable")
par(mfrow=c(1,3))
plot(rawdata$user_name,rawdata$classe,main="Exploratory graph of classe variable against username variable")
plot(rawdata$cvtd_timestamp,rawdata$classe,main="Exploratory graph of classe variable against timestamp variable")
plot(rawdata$num_window,rawdata$classe,main="Exploratory graph of classe variable against num_window variable")
help(par)
par(mfrow=c(1,3),title="Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,0,2,0))
title("Exploratory graphs of possible slicing basis")
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
plot(rawdata$num_window,rawdata$classe)
par(mfrow=c(1,3),oma=c(5,5,5,5))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,5,5,5))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,5,5,0))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,0,5,0))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,1,2,1))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,1,2,1))
title("Exploratory graphs of possible slicing basis",outer=TRUE)
par(mfrow=c(1,3),oma=c(0,1,2,1))
title("Exploratory graphs of possible slicing basis",outer=TRUE)
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
plot(rawdata$num_window,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,1,0))
title("Exploratory graphs of possible slicing basis",outer=TRUE)
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,5,0))
title("Exploratory graphs of possible slicing basis",outer=TRUE)
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,5,0))
title("Exploratory graphs of possible slicing basis",outer=FALSE)
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,5,0))
title("Exploratory graphs of possible slicing basis")
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,5,0))
title("Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,0,5,0))
title(main="Exploratory graphs of possible slicing basis")
plot(rawdata$user_name,rawdata$classe)
par(mfrow=c(1,3),oma=c(0,0,5,0))
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
plot(rawdata$num_window,rawdata$classe)
title(main="Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,0,5,0),main="Exploratory graphs of possible slicing basis")
help(par)
par(mfrow=c(1,3),oma=c(0,0,5,0),title="Exploratory graphs of possible slicing basis")
par(mfrow=c(1,3),oma=c(0,0,2,0))
plot(rawdata$user_name,rawdata$classe)
plot(rawdata$cvtd_timestamp,rawdata$classe)
plot(rawdata$num_window,rawdata$classe)
title(main="Exploratory graphs of possible slicing basis",outer=T)
par(mfrow=c(1,3),oma=c(0,0,2,0))
plot(rawdata$user_name,rawdata$classe,ylab="Classe",xlab="User")
plot(rawdata$cvtd_timestamp,rawdata$classe,ylab="Classe",xlab="Time Stamp")
plot(rawdata$num_window,rawdata$classe,ylab="Classe",xlab="num_window")
title(main="Exploratory graphs of possible slicing basis",outer=T)
help(cbind)
setwd("C:/Users/weijie/Desktop/Coursera R course/VIII. Practical Machine Learning")
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl1,destfile="rawdata.csv")
rawdata <- read.csv("./rawdata.csv")
download.file(fileUrl2,destfile="testcases.csv")
test_cases <- read.csv("./testcases.csv")
library(caret)
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
trg_allPredictors=training[,-c(1,2,3,4,5,6,7,160)]
v=152/4
trg_beltPred <- trg_allPredictors[1:v]
trg_beltPred_temp <- trg_beltPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_beltPredgyros <- 1/3*trg_beltPred_temp[,4]+1/3*trg_beltPred_temp[,5]+1/3*trg_beltPred_temp[,6]
trg_beltPredaccel <- 1/3*trg_beltPred_temp[,7]+1/3*trg_beltPred_temp[,8]+1/3*trg_beltPred_temp[,9]
trg_beltPredmagnet <- 1/3*trg_beltPred_temp[,10]+1/3*trg_beltPred_temp[,11]+1/3*trg_beltPred_temp[,12]
trg_beltPred_short <- cbind(trg_beltPred_temp[,c(1,2,3)],trg_beltPredgyros,trg_beltPredaccel,trg_beltPredmagnet)
View(trg_beltPred_short)
trg_armPred <- trg_allPredictors[v+1:2*v]
trg_armPred_temp <- trg_armPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_armPredgyros <- 1/3*trg_armPred_temp[,4]+1/3*trg_armPred_temp[,5]+1/3*trg_armPred_temp[,6]
trg_armPredaccel <- 1/3*trg_armPred_temp[,7]+1/3*trg_armPred_temp[,8]+1/3*trg_armPred_temp[,9]
trg_armPredmagnet <- 1/3*trg_armPred_temp[,10]+1/3*trg_armPred_temp[,11]+1/3*trg_armPred_temp[,12]
trg_armPred_short <- cbind(trg_armPred_temp[,c(1,2,3)],trg_armPredgyros,trg_armPredaccel,trg_armPredmagnet)
#Forearm Predictors
trg_forearmPred <- trg_allPredictors[2*v+1:3*v]
trg_forearmPred_temp <- trg_forearmPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_forearmPredgyros <- 1/3*trg_forearmPred_temp[,4]+1/3*trg_forearmPred_temp[,5]+1/3*trg_forearmPred_temp[,6]
trg_forearmPredaccel <- 1/3*trg_forearmPred_temp[,7]+1/3*trg_forearmPred_temp[,8]+1/3*trg_forearmPred_temp[,9]
trg_forearmPredmagnet <- 1/3*trg_forearmPred_temp[,10]+1/3*trg_forearmPred_temp[,11]+1/3*trg_forearmPred_temp[,12]
trg_forearmPred_short <- cbind(trg_forearmPred_temp[,c(1,2,3)],trg_forearmPredgyros,trg_forearmPredaccel,trg_forearmPredmagnet)
#Dumbbell Predictors
trg_dumbbellPred <- trg_allPredictors[3*v+1:4*v]
trg_dumbbellPred_temp <- trg_dumbbellPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_dumbbellPredgyros <- 1/3*trg_dumbbellPred_temp[,4]+1/3*trg_dumbbellPred_temp[,5]+1/3*trg_dumbbellPred_temp[,6]
trg_dumbbellPredaccel <- 1/3*trg_dumbbellPred_temp[,7]+1/3*trg_dumbbellPred_temp[,8]+1/3*trg_dumbbellPred_temp[,9]
trg_dumbbellPredmagnet <- 1/3*trg_dumbbellPred_temp[,10]+1/3*trg_dumbbellPred_temp[,11]+1/3*trg_dumbbellPred_temp[,12]
trg_dumbbellPred_short <- cbind(trg_dumbbellPred_temp[,c(1,2,3)],trg_dumbbellPredgyros,trg_dumbbellPredaccel,trg_dumbbellPredmagnet)
trg_beltPred <- trg_allPredictors[,1:v]
trg_beltPred_temp <- trg_beltPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_beltPredgyros <- 1/3*trg_beltPred_temp[,4]+1/3*trg_beltPred_temp[,5]+1/3*trg_beltPred_temp[,6]
trg_beltPredaccel <- 1/3*trg_beltPred_temp[,7]+1/3*trg_beltPred_temp[,8]+1/3*trg_beltPred_temp[,9]
trg_beltPredmagnet <- 1/3*trg_beltPred_temp[,10]+1/3*trg_beltPred_temp[,11]+1/3*trg_beltPred_temp[,12]
trg_beltPred_short <- cbind(trg_beltPred_temp[,c(1,2,3)],trg_beltPredgyros,trg_beltPredaccel,trg_beltPredmagnet)
trg_armPred <- trg_allPredictors[,v+1:2*v]
trg_armPred_temp <- trg_armPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_armPredgyros <- 1/3*trg_armPred_temp[,4]+1/3*trg_armPred_temp[,5]+1/3*trg_armPred_temp[,6]
trg_armPredaccel <- 1/3*trg_armPred_temp[,7]+1/3*trg_armPred_temp[,8]+1/3*trg_armPred_temp[,9]
trg_armPredmagnet <- 1/3*trg_armPred_temp[,10]+1/3*trg_armPred_temp[,11]+1/3*trg_armPred_temp[,12]
trg_armPred_short <- cbind(trg_armPred_temp[,c(1,2,3)],trg_armPredgyros,trg_armPredaccel,trg_armPredmagnet)
trg_armPred <- trg_allPredictors[,v+1:2*v]
View(trg_armPred)
trg_armPred <- trg_allPredictors[,39:78]
trg_armPred <- trg_allPredictors[,v+1:76]
trg_armPred <- trg_allPredictors[,(v+1):(2*v)]
trg_armPred_temp <- trg_armPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_armPredgyros <- 1/3*trg_armPred_temp[,4]+1/3*trg_armPred_temp[,5]+1/3*trg_armPred_temp[,6]
trg_armPredaccel <- 1/3*trg_armPred_temp[,7]+1/3*trg_armPred_temp[,8]+1/3*trg_armPred_temp[,9]
trg_armPredmagnet <- 1/3*trg_armPred_temp[,10]+1/3*trg_armPred_temp[,11]+1/3*trg_armPred_temp[,12]
trg_armPred_short <- cbind(trg_armPred_temp[,c(1,2,3)],trg_armPredgyros,trg_armPredaccel,trg_armPredmagnet)
trg_forearmPred <- trg_allPredictors[,(2*v+1):(3*v)]
trg_forearmPred_temp <- trg_forearmPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_forearmPredgyros <- 1/3*trg_forearmPred_temp[,4]+1/3*trg_forearmPred_temp[,5]+1/3*trg_forearmPred_temp[,6]
trg_forearmPredaccel <- 1/3*trg_forearmPred_temp[,7]+1/3*trg_forearmPred_temp[,8]+1/3*trg_forearmPred_temp[,9]
trg_forearmPredmagnet <- 1/3*trg_forearmPred_temp[,10]+1/3*trg_forearmPred_temp[,11]+1/3*trg_forearmPred_temp[,12]
trg_forearmPred_short <- cbind(trg_forearmPred_temp[,c(1,2,3)],trg_forearmPredgyros,trg_forearmPredaccel,trg_forearmPredmagnet)
trg_dumbbellPred <- trg_allPredictors[,(3*v+1):(4*v)]
trg_dumbbellPred_temp <- trg_dumbbellPred[,c(1,2,3,30,31,32,33,34,35,36,37,38)]
trg_dumbbellPredgyros <- 1/3*trg_dumbbellPred_temp[,4]+1/3*trg_dumbbellPred_temp[,5]+1/3*trg_dumbbellPred_temp[,6]
trg_dumbbellPredaccel <- 1/3*trg_dumbbellPred_temp[,7]+1/3*trg_dumbbellPred_temp[,8]+1/3*trg_dumbbellPred_temp[,9]
trg_dumbbellPredmagnet <- 1/3*trg_dumbbellPred_temp[,10]+1/3*trg_dumbbellPred_temp[,11]+1/3*trg_dumbbellPred_temp[,12]
trg_dumbbellPred_short <- cbind(trg_dumbbellPred_temp[,c(1,2,3)],trg_dumbbellPredgyros,trg_dumbbellPredaccel,trg_dumbbellPredmagnet)
names(trg_beltPred_short)
table(names(trg_beltPred_short,trg_armPred_short)
)
table(names(trg_beltPred_short),names(trg_armPred_short))
help(table)
table(row.names=c("Belt","Arm","Forearm","Dumbbell"))
table(row.names=c("Belt","Arm","Forearm","Dumbbell"),responseName=c("eh"))
table(row.names=c("Belt","Arm","Forearm","Dumbbell"),responseName=c("eh1","ehwa","ehji","ehbo"))
modelFit1 <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_beltPred_short)
summary(modelFit$finalModel)
summary(modelFit1$finalModel)
modelFit2 <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_armPred_short)
summary(modelFit2$finalModel)
modelFit2 <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_armPred_short)
modelFit3 <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_forearmPred_short)
summary(modelFit3$finalModel)
modelFit4 <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_dumbbellPred_short)
summary(modelFit4$finalModel)
trg_Pred_short <- cbind(trg_beltPred_short,trg_armPred_short,trg_forearmPred_short,trg_dumbbellPred_short)
modelFit <- train(as.numeric(training$classe)~.,method="lm",preProcess="pca",data=trg_Pred_short)
summary(modelFit$finalModel)
modelFit <- train(as.numeric(training$classe)~.,method="glm",preProcess="pca",data=trg_Pred_short)
summary(modelFit$finalModel)
c = predict(modelFit,testing)
cat("\014")
setwd("C:/Users/weijie/Desktop/Coursera R course/VIII. Practical Machine Learning")
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl1,destfile="rawdata.csv")
rawdata <- read.csv("./rawdata.csv")
download.file(fileUrl2,destfile="testcases.csv")
test_cases <- read.csv("./testcases.csv")
library(caret)
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
trg_allPredictors=training[,-c(1,2,3,4,5,6,7,160)]
a <- NULL
j=1
n=nrow(training)
for(i in 1:ncol(trg_allPredictors)){
trg_allPredictors[,i]=as.numeric(trg_allPredictors[,i])
if(sum(is.na(trg_allPredictors[,i]))>0.8*n){
a[j]=i
j=j+1
}
}
trg_Predictors_short=trg_allPredictors[,-c(a[1:j-1])]
#We can now fit the model and concurrently perform PCA.
modelFit <- train(as.numeric(training$classe)~.,method="glm",preProcess="pca",data=trg_Predictors_short)
summary(modelFit$finalModel)
testing_all=testing[,-c(1,2,3,4,5,6,7,160)]
for(k in 1:ncol(testing_all)){
testing_all[,k]=as.numeric(testing_all[,k])
}
testing_short=testing_all[,-c(a[1:j-1])]
b <- predict(modelFit,testing_short)
for(m in 1:nrow(testing_short)){
b[m]=round(b[m],digits=0)
}
b=factor(b,levels=c(1,2,3,4,5))
confusionMatrix(b,as.numeric(testing$classe))
c <- predict(modelFit,test_cases[1,])
testcases_all=test_cases[,-c(1,2,3,4,5,6,7,160)]
for(q in 1:ncol(testcases_all)){
testcases_all[,q]=as.numeric(testcases_all[,q])
}
testcases_short=testcases_all[,-c(a[1:j-1])]
c <- predict(modelFit,testcases_short[1,])
c
c <- predict(modelFit,testcases_short)
View(testcases_short)
c <- predict(modelFit,testcases_short[1,])
b <- predict(modelFit,testing_short)
b
str(testcases_short)
Pred_Test20 <- predict(modelFit,testcases_short)
help(predict)
