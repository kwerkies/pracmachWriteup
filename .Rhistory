text(x=6.8,y=80,"Mean")
par(mar=c(1,1,1,1),mfrow=c(2,1))
t_plot <- hist(theory,breaks=100,main="Simulations of exponential distributions",xlab="",xlim=c(0,20))
d <- density(theory)
lines(d,col="orange")
d
s_plot <- hist(sample,breaks=100,main="Sample: Averages of 40 exponential distributions",xlab="",xlim=c(0,20))
d2 <- density(sample)
lines(d2,col="orange")
par(mar=c(1,1,1,1),mfrow=c(2,1))
t_plot <- hist(theory,breaks=100,main="Simulations of exponential distributions",xlab="",xlim=c(0,20))
lines(density(theory,na.rm=T,from=0,to=max.theory))
par(mar=c(1,1,1,1),mfrow=c(2,1))
t_plot <- hist(theory,breaks=100,main="Simulations of exponential distributions",xlab="",xlim=c(0,20))
lines(density(theory,na.rm=T))
lines(density(theory,na.rm=T))
plot(lines(density(theory,na.rm=T)))
plot(density(theory,na.rm=T))
help(plot)
plot(density(theory,na.rm=T),main="Variance of simulations of exponential distributions")
par(mar=c(1,1,1,1),mfrow=c(2,1))
plot(density(theory,na.rm=T),main="Variance of simulations of exponential distributions")
plot(density(sample,na.rm=T),main="Variance of sample of the averages of 40 exponential distributions")
par(mar=c(1,1,1,1),mfrow=c(2,1))
plot(density(theory,na.rm=T),main="Variance of simulations of exponential distributions",xlim=c(0,30))
plot(density(sample,na.rm=T),main="Variance of sample of the averages of 40 exponential distributions",xlim=c(0,30))
plot(density(theory,na.rm=T),main="Variance of simulations of exponential distributions",xlim=c(0,30))
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",xlim=c(0,30),ylim=(0,0.3))
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations (1) 1000 simulations and (2) sample of 40 averages",xlim=c(0,30),ylim=(0,0.3))
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: 1000 simulations and sample of 40 averages",xlim=c(0,30),ylim=(0,0.3))
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations 1000 simulations and sample of 40 averages",xlim=c(0,30),ylim=(0,0.3))
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations 1000 simulations and sample of 40 averages",xlim=c(0,30))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",xlim=c(0,30))
help(plot)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=0.4)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=0.004)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=0.04)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=4)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=40)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=20)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=40)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=3)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=8)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=5)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=5)
lines(density(sample,na.rm=T))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=5,col="red")
lines(density(sample,na.rm=T),col="orange")
par(mar=c(1,1,1,1),mfrow=c(2,1))
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=3,col="red")
lines(density(sample,na.rm=T),col="orange")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red")
lines(density(sample,na.rm=T),col="orange")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3,text="(2)")
help)lines)
help(lines)
help(plot)
help(text)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=10,y=max(sample),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=10,y=0.2,labels="(2)")
density.max(sample)
max(sample)
mean(sample)
density(sample)
class(density)
density[,1]
density.x
help(density)
summary(density)
density$x
str(density)
density.mean
density(sample)[,1]
summary(density(sample))
as.data.frame(density(sample))
density(sample)[1]
density(sample)$x
mean(density(sample)$x)
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=mean(density(sample)$x),y=max(density(sample)$y),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=mean(density(sample)$x),y=1.3*(max(density(sample)$y)),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
text(x=mean(density(theory)$x),y=1.1*(max(density(theory)$y)),labels="(1)")
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=mean(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
text(x=max(density(theory)$x),y=1.1*(max(density(theory)$y)),labels="(1)")
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=max(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
plot(density(theory,na.rm=T),main="Comparison between Variances of exponential simulations: (1) 1000 simulations and (2) sample of 40 averages",asp=10,col="red",lwd=3)
text(x=median(density(theory)$x),y=1.1*(max(density(theory)$y)),labels="(1)")
lines(density(sample,na.rm=T),col="orange",lwd=3)
text(x=median(density(sample)$x),y=1.1*(max(density(sample)$y)),labels="(2)")
lambda = 0.2
theory <- rexp(1000,rate=lambda)
sample = NULL
for(i in 1:1000){ sample =c(sample,mean(rexp(40,rate=lambda)))}
par(mar=c(1,1,1,1),mfrow=c(2,1))
t_plot <- hist(theory,breaks=100,main="Simulations of exponential distributions",xlab="")
s_plot <- hist(sample,breaks=100,main="Sample: Averages of 40 exponential distributions",xlab="")
library(datasets)
data(ToothGrowth)
ToothGrowth
View(ToothGrowth)
plot(ToothGrowth[,1])
help(ToothGrowth)
summary(ToothGrowth)
library(ggplot2)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~ToothGrowth)
str(ToothGrowth)
library(ggplot2)
qplot("Tooth Length","Delivery method",data=ToothGrowth,facets=.~ToothGrowth)
library(ggplot2)
qplot("Tooth Length","Delivery method",data=ToothGrowth,facets=.~supp)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~dose)
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~as.factor(dose))
qplot(Tooth Length,Delivery method,data=ToothGrowth,facets=.~(as.factor(dose)))
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~(as.factor(dose)))
as.factor(dose)
as.factor(ToothGrowth$dose)
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=ToothGrowth$len,facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=as.data(ToothGrowth$len),facets=.~(as.factor(ToothGrowth$dose)))
qplot(Tooth,Delivery,data=as.data.frame(ToothGrowth$len),facets=.~(as.factor(ToothGrowth$dose)))
ToothGrowth$len
class(ToothGrowth)
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~supp)))
qplot(Tooth,Delivery,data=ToothGrowth,facets=.~supp)
qplot(len,supp,data=ToothGrowth,facets=.~dose)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method")
help(qplot)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method"asp=1)
qplot(len,supp,data=ToothGrowth,facets=.~dose,main="Tooth Length by Vitamin C dosage level and delivery method",asp=1)
mean(ToothGrowth$len[ToothGrowth$supp==OJ])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ"])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose=2])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose==2])
mean(ToothGrowth$len[ToothGrowth$supp=="OJ" && ToothGrowth$dose==2.0])
a <-ToothGrowth[ToothGrowth$supp="OJ"&&ToothGrowth$dose==2]
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&ToothGrowth$dose==2]
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&ToothGrowth$dose=="2.0"]
str(ToothGrowth)
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2.0"]
as.factor(ToothGrowth$dose)
a <-ToothGrowth[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2"]
View(a)
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth$len[ToothGrowth$supp=="OJ"&&as.factor(ToothGrowth$dose)=="2"]
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth[ToothGrowth[,2]=="OJ"]
a <-ToothGrowth[[,2]=="OJ"]
a <-ToothGrowth[ToothGrowth$supp=="OJ"]
a <-ToothGrowth[which(ToothGrowth$supp=="OJ" & ToothGrowth$dose)==2,]
View(a)
a <-ToothGrowth[,which(ToothGrowth$dose)==2]
a <-ToothGrowth[,which(ToothGrowth$dose==2)]
a <-ToothGrowth[which(ToothGrowth$dose==2),]
a <-ToothGrowth[which(ToothGrowth$dose==2 & ToothGrowth$supp=="OJ"),]
View(a)
Len_OJ2 <- ToothGrowth[which(ToothGrowth$supp=="OJ" & ToothGrowth$dose==2),]
mean(Len_OJ2[,1])
Len_VC2 <- ToothGrowth[which(ToothGrowth$supp=="VC"&ToothGrowth$dose==2),]
TL = mean(Len_VC2[,1])
t.test(TL-mean(Len_OJ2[,1]))
t.test(Len_VC2[,1]-Len_OJ2[,1])
Len_OJall <- ToothGrowth[which(ToothGrowth$supp=="OJ"),]
Len_VCall <- ToothGrowth[which(ToothGrowth$supp=="VC"),]
t.test(Len_VCall[,1]-Len_OJall[,1])
t.test(Len_OJall[,1]-Len_VCall[,1])
fit <- lm(len~dose,data=ToothGrowth)
fit
plot(fit)
plot(fit)
plot(fit)
fit$r.squared
summary(fit)$r.squared
library(datasets)
data(mtcars)
fit <- lm(mpg~cyl+wt)
mtcars
fit <- lm(mpg~cyl+wt)
c <- mtcars[which(mtcars$cyl==4 | mtcars$cyl==8),]
fit <- lm(mpg ~ cyl+wt,data=c)
fit
fit2 <- lm(mpg ~ cyl,data=c)
fit2
View(c)
fit3 <- lm(mpg ~cyl+wt,data=mtcars)
fit3
fit4 <- lm(mpg ~ cyl,data=mtcars)
fit3
fit4
fit$coef
fit$coef[2]
fit$coef[2]*4
library(datasets)
data(mtcars)
c <- mtcars[which(mtcars$cyl==4 | mtcars$cyl==8),]
fit1 <- lm(mpg ~ cyl+wt,data=c)
fit2 <- lm(mpg ~ cyl,data=c)
fit1
fit2
help(dfbetas)
x<-c(0.586,0.166,-0.042,-0.614,11.72)
y<-c(0.549,-0.026,-0.127,-0.751,1.344)
fit5 <- lm(y~x)
plot(fit5)
dfbeta(fit5(max(hatvalues)))
fit5 <- lm(y~x)
dfbeta(fit5(max(hatvalues)))
dfbeta(fit5)
dfbeta(fit5)[1:5,2]
dfbeta(fit5)[1:5,max(hatvalues(fit5))]
cat(\014)
cat("\014")
library(datasets)
data(mtcars)
fit <- lm(mpg ~ .,data=mtcars)
fit
View(mtcars)
help(mtcars)
fit$coef
fit2 <- lm(mpg ~ am, data=mtcars)
fit2
fit1$coef[=="am"]
fit1$coef[1]
fit1 <- lm(mpg ~ .,data=mtcars)
fit1$coef[1]
fit1$coef[5]
fit1$coef[=="am"]
fit1$coef[which(fit1$coef=="am"),1]
fit1$coef[which(fit1$coef=="am")]
fit1$coef[fit1$coef=="am"]
class(fit1$coef)
fit1$coef
fit1$coef["am"]
help(t.test)
resid(fit2)
plot(resid(fit2))
help(abline)
plot(resid(fit2))
abline(h=0,col="darkblue")
summary(fit2)$r.squared
summary(fit2)
plot(fit2)
par(mfrow=c(2,2))
plot(fit2)
par(mar=c(1,1,1,1),mfrow=c(2,2))
plot(fit2)
par(mar=c(2,2,2,2),mfrow=c(2,2))
plot(fit2)
par(mar=c(3,3,3,3),mfrow=c(2,2))
plot(fit2)
old <- c(140,138,150,148,135)
now <- c(132,135,151,146,130)
mean_old <- mean(old)
mean_now <- mean(now)
qt(.95,15)
t.test(old - now)
qt(.975,8)
qt(.025,8)
2.306004*(sqrt(30)/sqrt(9))+1100
2.306004*(30/sqrt(9))+1100
coke <- c(1,1,1,0)
pepsi <- c(0,0,0,1)
t.test(coke-pepsi)
qt(.95,8)
qt(.95,8)*1078
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
View(predictors)
adData=data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis,p=0.5,list=FALSE)
adData=data.frame(diagnosis,predictors)
trainIndex=createDataPartition(diagnosis,p=0.5)
data(concrete)
set.seed(975)
inTrain=createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training=mixtures[inTrain,]
View(mixtures)
View(concrete)
plot(Cement,CompressiveStrength,data=mixtures)
help(cement)
help(plot)
plot(mixtures$Cement,mixtures$CompressiveStrength)
plot(mixtures$CompressiveStrength)
plot(training$CompressiveStrength)
plot(training$CompressiveStrength,colour=.)
plot(training$CompressiveStrength,colour=FlyAsh)
plot(training$CompressiveStrength,colour=training$FlyAsh)
plot(training$CompressiveStrength,color=training$FlyAsh)
library(ggplot2)
plot(training$CompressiveStrength,color=training$FlyAsh)
plot(training$CompressiveStrength,colour=training$FlyAsh)
lm(formula=CompressiveStrength~.,data=training)
hist(training$SuperPlasticizer)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData=data.frame(diagnosis,predictors)
inTrain=createDataPartition(adData$diagnosis,p=3/4)[[1]]
training=adData[inTrain,]
testing=adData[-inTrain,]
View(training)
col.names(training)
colnames(training)
which(colnames(training)==IL)
which(colnames(training)=="IL")
which(colnames(training)=="IL+")
which(colnames(training)=="IL?.")
help(grep)
grep("IL",colnames(training))
grep("^IL",colnames(training))
I=grep("^IL",colnames(training))
preProcess(training[,-1],method="pca")
preProcess(training[,],method="pca")
help(preProcess)
preProcess(training[,I],method="pca")
preProcess(training[,I],method="pca",prcomp=7)
M <- abs(cor(training[,I]))
diag(M)<-0
which(M>0.8,arr.ind=T)
View(M)
which(M>0.4,arr.ind=T)
modelFit <- train(as.numeric(training$classe)~.,method="rf",data=trg_Predictors_short,prox=TRUE,ntree=0.2*ncol(trg_Predictors_short))
setwd("C:/Users/weijie/Desktop/Coursera R course/VIII. Practical Machine Learning")
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl1,destfile="rawdata.csv")
rawdata <- read.csv("./rawdata.csv")
download.file(fileUrl2,destfile="testcases.csv")
test_cases <- read.csv("./testcases.csv")
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
library(caret)
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
trg_allPredictors=training[,-c(1,2,3,4,5,6,7,160)]
a <- NULL
j=1
n=nrow(training)
for(i in 1:ncol(trg_allPredictors)){
trg_allPredictors[,i]=as.numeric(trg_allPredictors[,i])
if(sum(is.na(trg_allPredictors[,i]))>0.8*n){
a[j]=i
j=j+1
}
}
trg_Predictors_short=trg_allPredictors[,-c(a[1:j-1])]
modelFit <- train(as.numeric(training$classe)~.,method="rf",data=trg_Predictors_short,prox=TRUE,ntree=0.2*ncol(trg_Predictors_short))
summary(modelFit$finalModel)
View(trg_Predictors_short)
library(randomForest)
modelFit <- train(as.numeric(training$classe)~.,method="rf",preprecess="pca",data=trg_Predictors_short,prox=TRUE,ntree=0.2*ncol(trg_Predictors_short))
pFx <- preProcess(log10(trg_Predictors_short[,]+1),method="pca")
library(caret)
pFx <- preProcess(log10(trg_Predictors_short[,]+1),method="pca")
pFx <- preProcess(trg_Predictors_short,method="pca")
pFx
trg_Predictors_PC <- predict(pFx,trg_Predictors_short)
library(randomForest)
modelFit <- randomForest(trg_Predictors_PC,training$classe)
summary(modelFit$finalodel)
summary(modelFit$finalModel)
modelFit
testing_all=testing[,-c(1,2,3,4,5,6,7,160)]
for(k in 1:ncol(testing_all)){
testing_all[,k]=as.numeric(testing_all[,k])
}
testing_short=testing_all[,-c(a[1:j-1])]
tFx <- preProcess(testing_short,method="pca")
testing_PC <- predict(tFx,testing_short)
Pred_Test <- predict(modelFit,testing_PC)
testing_short=testing_all[,-c(a[1:j-1])]
Pred_Test <- predict(modelFit,testing_short)
testing_PC <- predict(pFx,testing_short)
Pred_Test <- predict(modelFit,testing_PC)
confusionMatrix(testing$classe,Pred_Test)
modelFit <- randomForest(trg_Predictors_PC,training$classe,mtry=12)
modelFit
modelFit <- randomForest(trg_Predictors_PC,training$classe,ntree=1000)
modelFit
cat("\014")
setwd("C:/Users/weijie/Desktop/Coursera R course/VIII. Practical Machine Learning")
fileUrl1 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
fileUrl2 <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(fileUrl1,destfile="rawdata.csv")
rawdata <- read.csv("./rawdata.csv")
download.file(fileUrl2,destfile="testcases.csv")
test_cases <- read.csv("./testcases.csv")
library(caret)
inTrain <- createDataPartition(rawdata$num_window,p=0.6,list=FALSE)
training <- rawdata[inTrain,]
testing <- rawdata[-inTrain,]
trg_allPredictors=training[,-c(1,2,3,4,5,6,7,160)]
a <- NULL
j=1
n=nrow(training)
for(i in 1:ncol(trg_allPredictors)){
trg_allPredictors[,i]=as.numeric(trg_allPredictors[,i])
if(sum(is.na(trg_allPredictors[,i]))>0.8*n){
a[j]=i
j=j+1
}
}
trg_Predictors_short=trg_allPredictors[,-c(a[1:j-1])]
pFx <- preProcess(trg_Predictors_short,method="pca")
trg_Predictors_PC <- predict(pFx,trg_Predictors_short)
library(randomForest)
modelFit <- randomForest(trg_Predictors_PC,training$classe,ntree=500)
modelFit
testing_all=testing[,-c(1,2,3,4,5,6,7,160)]
for(k in 1:ncol(testing_all)){
testing_all[,k]=as.numeric(testing_all[,k])
}
testing_short=testing_all[,-c(a[1:j-1])]
testing_PC <- predict(pFx,testing_short)
confusionMatrix(testing$classe,predict(modelFit,testing_PC))
testcases_all=test_cases[,-c(1,2,3,4,5,6,7,160)]
for(q in 1:ncol(testcases_all)){
testcases_all[,q]=as.numeric(testcases_all[,q])
}
testcases_short=testcases_all[,-c(a[1:j-1])]
testcases_PC <- predict(pFx,testcases_short)
Pred_Test20 <- predict(modelFit,testcases_short)
Pred_Test20 <- predict(modelFit,testcases_PC)
Pred_Test20 <- predict(modelFit,testcases_PC[1,])
Pred_Test20 <- predict(modelFit,testcases_PC[1])
names(testcases_PC)
names(testing_PC)
View(testcases_PC)
View(testcases_short)
str(testcases_short)
testcases_PC <- predict(pFx,testcases_short,na.remove=TRUE)
View(testcases_PC)
View(testcases_short)
tFx <- preProcess(testcases_short,method="pca")
testcases_PC <- predict(tFx,testcases_short)
testcases_PC <- predict(pFx,testcases_short)
View(testcases_PC)
testcases_PC <- as.numeric(predict(pFx,testcases_short))
testcases_PC=as.numeric(testcases_PC)
Pred_Test20 <- predict(modelFit,testcases_PC[1,])
help(predict)
Pred_Test20 <- predict(modelFit,testcases_short[1,])
View(testcases_short)
Pred_Test20 <- predict(modelFit,testcases_short[1,],na.remove=T)
tFx <- preProcess(testcases_short,method="pca")
help(preProces)
help(preProcess)
testcases_PC <- predict(pFx,testcases_short,na.remove=TRUE)
tFx <- preProcess(testcases_short,method="pca")
help(predict)
str(testcases_short)
names(trg_Predictors_PC)
names(trg_Predictors_short)
View(test_cases)
testcases[,160]
test_cases[,160]
View(testcases_PC)
testcases_PC <- predict(pFx,testcases_short,na.action=na.omit)
View(testcases_PC)
str(pFx)
class(pFx)
testcases_PC <- predict(pFx,testcases_short)
View(testcases_PC)
View(testcases_short)
View(trg_Predictors_short)
View(trg_Predictors_PC)
View(testcases_short)
for(i in 1:ncol(testcases_short)){}
View(testcases_PC)
predict(pFx,testcases_short)
predict(pFx,testing_short)
testcases_PC[1,] <- predict(pFx,testcases_short)
warnings()
View(testcases_PC)
testcases_PC[1,] <- predict(modelFit,testcases_short)
testcases_PC <- predict(pFx,testcases_short)
